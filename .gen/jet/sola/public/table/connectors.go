//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Connectors = newConnectorsTable("public", "connectors", "")

type connectorsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	ExternalID postgres.ColumnString
	StationID  postgres.ColumnString
	Type       postgres.ColumnString
	MaxPowerKw postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConnectorsTable struct {
	connectorsTable

	EXCLUDED connectorsTable
}

// AS creates new ConnectorsTable with assigned alias
func (a ConnectorsTable) AS(alias string) *ConnectorsTable {
	return newConnectorsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConnectorsTable with assigned schema name
func (a ConnectorsTable) FromSchema(schemaName string) *ConnectorsTable {
	return newConnectorsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConnectorsTable with assigned table prefix
func (a ConnectorsTable) WithPrefix(prefix string) *ConnectorsTable {
	return newConnectorsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConnectorsTable with assigned table suffix
func (a ConnectorsTable) WithSuffix(suffix string) *ConnectorsTable {
	return newConnectorsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConnectorsTable(schemaName, tableName, alias string) *ConnectorsTable {
	return &ConnectorsTable{
		connectorsTable: newConnectorsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newConnectorsTableImpl("", "excluded", ""),
	}
}

func newConnectorsTableImpl(schemaName, tableName, alias string) connectorsTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		ExternalIDColumn = postgres.StringColumn("external_id")
		StationIDColumn  = postgres.StringColumn("station_id")
		TypeColumn       = postgres.StringColumn("type")
		MaxPowerKwColumn = postgres.FloatColumn("max_power_kw")
		allColumns       = postgres.ColumnList{IDColumn, ExternalIDColumn, StationIDColumn, TypeColumn, MaxPowerKwColumn}
		mutableColumns   = postgres.ColumnList{ExternalIDColumn, StationIDColumn, TypeColumn, MaxPowerKwColumn}
	)

	return connectorsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ExternalID: ExternalIDColumn,
		StationID:  StationIDColumn,
		Type:       TypeColumn,
		MaxPowerKw: MaxPowerKwColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
