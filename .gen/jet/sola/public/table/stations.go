//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Stations = newStationsTable("public", "stations", "")

type stationsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	ExternalUID postgres.ColumnString
	Public      postgres.ColumnBool
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Address     postgres.ColumnString
	Latitude    postgres.ColumnFloat
	Longitude   postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StationsTable struct {
	stationsTable

	EXCLUDED stationsTable
}

// AS creates new StationsTable with assigned alias
func (a StationsTable) AS(alias string) *StationsTable {
	return newStationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StationsTable with assigned schema name
func (a StationsTable) FromSchema(schemaName string) *StationsTable {
	return newStationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StationsTable with assigned table prefix
func (a StationsTable) WithPrefix(prefix string) *StationsTable {
	return newStationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StationsTable with assigned table suffix
func (a StationsTable) WithSuffix(suffix string) *StationsTable {
	return newStationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStationsTable(schemaName, tableName, alias string) *StationsTable {
	return &StationsTable{
		stationsTable: newStationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newStationsTableImpl("", "excluded", ""),
	}
}

func newStationsTableImpl(schemaName, tableName, alias string) stationsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		ExternalUIDColumn = postgres.StringColumn("external_uid")
		PublicColumn      = postgres.BoolColumn("public")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		AddressColumn     = postgres.StringColumn("address")
		LatitudeColumn    = postgres.FloatColumn("latitude")
		LongitudeColumn   = postgres.FloatColumn("longitude")
		allColumns        = postgres.ColumnList{IDColumn, ExternalUIDColumn, PublicColumn, TitleColumn, DescriptionColumn, AddressColumn, LatitudeColumn, LongitudeColumn}
		mutableColumns    = postgres.ColumnList{ExternalUIDColumn, PublicColumn, TitleColumn, DescriptionColumn, AddressColumn, LatitudeColumn, LongitudeColumn}
	)

	return stationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ExternalUID: ExternalUIDColumn,
		Public:      PublicColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Address:     AddressColumn,
		Latitude:    LatitudeColumn,
		Longitude:   LongitudeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
